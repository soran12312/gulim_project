<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="project.gulim.dao.SubscriptionDAO">

	
	<!--  선택한 구독권 가격 subscribe db저장 -->
	<insert id="saveSubscription" parameterType="project.gulim.domain.SubscribeDTO" useGeneratedKeys="true" keyProperty="sub_num">
	    INSERT INTO subscribe (price, id) VALUES (#{price}, #{id})
	</insert>
	
	<!-- 유저 id basket db 저장-->
	<insert id="saveCart" parameterType="project.gulim.domain.BasketDTO" useGeneratedKeys="true" keyProperty="basket_num">
	    INSERT INTO basket (id) VALUES (#{id})
	</insert>
	
	
	<!-- purchase db 장바구니, 구독권 번호 저장 -->
	<insert id="savePurchase" parameterType="map">
	    INSERT INTO purchase (basket_num, sub_num, amount)
	    VALUES (#{basket_num}, #{sub_num}, #{amount})
	</insert>
	
	
	<!-- 현재로그인 중인 id의 장바구니번호  -->
	<select id="getUserBasketNumber" parameterType="java.lang.String" resultType="java.lang.Integer">
	    SELECT basket_num
	    FROM basket
	    WHERE id = #{id}
	</select>
	
	
	<!-- 장바구니번호가져와서 장바구니에 담긴 구독권 가져오기 장바구니 리스트-->
	<select id="getUserBasketSubscription" parameterType="java.lang.Integer" resultType="map">
		SELECT *
		FROM basket AS b JOIN purchase p 
		ON b.basket_num = p.basket_num
		join subscribe s 
		ON p.sub_num = s.sub_num
		WHERE b.basket_num = #{basketNum} and p.purchase_state = 0 and book_num is null
	</select>
	
	
	
	<!-- 장바구니에 해당 구독권이 있는 상태에서 같은 구독권 추가 -->
	<select id="getExistingSubscriptionAmount" parameterType="java.lang.Integer" resultType = "java.lang.Integer">
		SELECT p.amount
		FROM basket AS b
		JOIN purchase AS p ON b.basket_num = p.basket_num
		JOIN subscribe AS s ON p.sub_num = s.sub_num
		WHERE b.basket_num = #{basketNum} and s.price = #{price} and p.purchase_state = 0
	</select>
	
	
	
	
	<!-- 수량 수정  -->
	<update id="updatePurchaseAmount" parameterType="map">
		UPDATE purchase p
		JOIN basket b ON b.basket_num = p.basket_num
		JOIN subscribe s ON p.sub_num = s.sub_num
		SET p.amount = #{updatedAmount}
		WHERE b.basket_num = #{basketNum} AND s.price = #{price}
	</update>
	
	
	
	<!-- +, - 버튼 수량 수정 -->
	<update id="updateQuantity" parameterType="java.lang.Integer">
		UPDATE purchase p
		JOIN basket b ON b.basket_num = p.basket_num
		JOIN subscribe s ON p.sub_num = s.sub_num
		SET p.amount = #{amount}
		WHERE p.sub_num = #{sub_num}
	
	</update>
	
	<!-- 삭제 -->
	<delete id ="deleteQuantity" parameterType="java.lang.Integer">
		DELETE p
		FROM purchase p INNER JOIN subscribe s 
		ON p.sub_num = s.sub_num 
		WHERE s.sub_num = #{sub_num}
	</delete>
	
	<!-- 해당 구독권 삭제-->
	<delete id ="deleteSubscription" parameterType="java.lang.Integer">
		DELETE 
		FROM subscribe
		WHERE sub_num = #{sub_num}
	</delete>
	
	
	
	<!-- 번호로 구독권 가격 -->
	<select id="getSubscriptionById" parameterType="java.lang.Integer" resultType = "java.lang.Integer">
	
		SELECT price
		FROM subscribe
		WHERE sub_num = #{sub_num}
	
	</select>
	
	
	<!-- 로그인중인 user의 구독권 데이터 확인  -->
	<select id="getSubscriptionByUserId" parameterType="java.lang.String" resultType = "project.gulim.domain.SubscribeDTO">
	
		SELECT *
		FROM subscribe s
		WHERE id = #{id} AND sub_state = 1
		ORDER BY end_date DESC
		LIMIT 1
	</select>
	
	
	<!-- 구독권 존재하면 end_date 연장 -->
	<update id="updateSubscriptionEndDate" parameterType="map">
		UPDATE subscribe
    	SET
        start_date = #{endDate},
        end_date = #{start_date},
        sub_state = 1
    	WHERE sub_num = #{sub_num}
	</update>
	
	
	<!-- 결제 완료 구독권 정보 업데이트 -->
	<update id="updateSubscriptionById" parameterType="map">
		UPDATE subscribe
    	SET
        start_date = now(),
        end_date = #{endDate},
        sub_state = 1
    	WHERE sub_num = #{sub_num} 
	</update>
	
	
	
	<!-- 결제 완료 후 purchase 업데이트 -->
	<update id="updatePurchaseState" parameterType="map">
		UPDATE purchase p
		JOIN basket b ON b.basket_num = p.basket_num
		JOIN subscribe s ON p.sub_num = s.sub_num
		SET p.purchase_state = 1
		WHERE p.sub_num = #{sub_num}
	</update>
	
	
	
	<!-- 친구id가 구독권이  없음 추가 -->
	<insert id="updateSubscriptionId" parameterType="map">
		INSERT INTO subscribe (start_date, end_date, id, sub_state, price)
        VALUES (now(), #{endDate}, #{id}, 1, #{price})
	
	</insert>
	
	
	<!-- 친구 id가 구독권이있으면 연장 -->
	<insert id="updateSubscriptionDate" parameterType="map">
	    INSERT INTO subscribe (start_date, end_date, id, sub_state, price)
	    VALUES (#{start_date}, #{endDate}, #{id}, 1, #{price})
	</insert>
	

	
</mapper>