<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="project.gulim.dao.MypageDAO">

<!--=========== START of 쪽지 ======================================================================================================-->
<!-- 받은 쪽지 리스트 불러오기 -->
	<select id="my_message" parameterType="String" resultType="MessageDTO">
		SELECT *
		FROM message
		WHERE receive_id = #{id}
		ORDER BY message_num desc
	</select>
	
<!-- 보낸 쪽지 리스트 불러오기 -->
	<select id="my_message2" parameterType="String" resultType="MessageDTO">
		SELECT *
		FROM message
		WHERE send_id = #{id}
		ORDER BY message_num desc
	</select>
	
<!-- 보낸 아이디옆에 닉네임 띄우기 -->
	<select id="nick_same_id" parameterType="String" resultType="String">
		SELECT nickname
		FROM member
		WHERE id = #{nick_same_id}
	</select>

<!-- 쪽지 보내기 -->
	<insert id="save_message" parameterType = "java.util.HashMap">
		INSERT INTO message (send_id, receive_id, message_title, message_content) 
		VALUES (#{send_id}, #{receive_id}, #{message_title}, #{message_content})	
	</insert>
	
<!-- 메세지 상세보기 -->
	<select id="detail_message" parameterType="Integer" resultType="MessageDTO">
		SELECT *
		FROM message
		WHERE message_num = #{num}
	</select>
	
<!-- 메세지 삭제 -->
	<select id="message_delete" parameterType="Integer" resultType="MessageDTO">
		DELETE FROM message 
		WHERE message_num = #{num}
	</select>
	
	
	
	
<!--=========== END of 쪽지 =====================================================================================================-->
<!--=========== START of 캘린더 =====================================================================================================-->
	<!-- 일정 저장 -->
	<insert id="insert_evt" parameterType = "CalenderDTO">
      INSERT INTO calender (id, calender_date, calender_title, calender_content) 
      VALUES (#{id}, #{calender_date}, #{calender_title},#{calender_content})   
    </insert>
    
    <!-- 일정리스트 가져오기 -->
    <select id="find_evt" parameterType="CalenderDTO" resultType="CalenderDTO">
      SELECT * 
      FROM calender
      WHERE id=#{id}
    </select>
    
    <!-- 게시물 삭제 -->
    <select id="delete_evt" parameterType="Integer" >
      DELETE FROM calender 
      WHERE calender_num = #{calender_num}
    </select>
  
<!--=========== END of 캘린더 ======================================================================================================-->
<!-- =========== START of 게임관리 ======================================================================================================	 -->

	<!-- 내가 마스터인 방의 room_num, room_name 가져오기 -->
	<select id="selectRoomById" parameterType="String" resultType="Map">
		SELECT room_num, room_name, room_state 
		FROM chating
		WHERE id = #{id}
	</select>
	
	<!-- 내가 마스터인 방에 join 신청한 사람들 중 참여상태가 0인(참가를 허용하지 않은) 신청의 갯수를 가져오기 -->
	<select id="selectNumOfJoinByRoomNum" parameterType="Integer" resultType="Integer">
		SELECT COUNT(room_num) num_of_join FROM `join`
		WHERE room_num = #{room_num} AND join_state = 0
		GROUP BY room_num
	</select>
	
	<!-- room_num으로 해당 방의 대표이미지 path 가져오기 -->
	<select id="selectImgPathByRoomNum" parameterType="Integer" resultType="String">
		SELECT path FROM image
		WHERE room_num = #{room_num}
	</select>
	
	<!-- 이용자의 아이디로 해당 이용자가 참여 신청한 room의 room_num을 모두 가져옴 -->
	<select id="selectAllJoinedRoomNumById" parameterType="String" resultType="JoinDTO">
		SELECT join_num, room_num, join_state FROM `join`
		WHERE id = #{id} AND join_state != 2
	</select>
	
	<!-- join_num으로 join_state를 가져옴 -->
	<select id="selectJoinStateByJoinNum" parameterType="Integer" resultType="Integer">
		SELECT join_state FROM `join`
		WHERE join_num = #{join_num}
	</select>
	
	<!-- 참가 취소 -->
	<update id="join_cancle" parameterType="Integer">
		UPDATE 	 `join` 
		SET		 join_state	= 2
		WHERE 	 join_num = #{join_num} 
	</update>
	
	<update id="dec_curr_member" parameterType="Integer">
		UPDATE chating
		SET curr_member = (SELECT curr_member-1 FROM chating WHERE room_num = #{room_num})
		WHERE room_num = #{room_num}
	</update>
	
	<!-- 방 삭제 -->
	<update id="room_delete" parameterType="Integer">
		UPDATE 	 chating 
		SET		 room_state	= 1
		WHERE 	 room_num = #{room_num} 
	</update>
	
	<!-- 방 수정 폼으로 이동할 때 방정보 가져오기 -->
	<select id="select_room_detail" parameterType="Integer" resultType="ChatingDTO">
		SELECT * FROM chating
		WHERE room_num = #{room_num}
	</select>
	
	<select id="select_tag_by_room_num" parameterType="Integer" resultType="String">
		SELECT tag_content FROM tag
		WHERE room_num = #{room_num}
	</select>
	
	<update id="room_modify" parameterType="ChatingDTO">
		UPDATE chating
		SET room_name=#{room_name}, max_member=#{max_member}, period=#{period}, plot=#{plot}, law=#{law}, etc=#{etc}, watching=#{watching}, video=#{video}
		WHERE room_num = #{room_num}
	</update>
	
	<delete id="delete_room_img" parameterType="Integer">
		DELETE FROM image
		WHERE room_num = #{room_num}
	</delete>
	
	<delete id="delete_room_tag" parameterType="Integer">
		DELETE FROM tag
		WHERE room_num = #{room_num}
	</delete>
	
	<!-- 채팅방 번호로 해당 채팅방 이름을 가져옴(개설상태가 0인 방만) -->
	<select id="selectRoomNameByPK" parameterType="Integer" resultType="String">
		SELECT room_name FROM chating
		WHERE room_num = #{room_num} AND room_state = 0
	</select>
	
	<!-- 채팅방 번호로 참가번호가져옴 -->
	<select id="char_sheet_list" parameterType="Integer" resultType="Integer">
		SELECT join_num 
		FROM `join`
		WHERE room_num = #{room_num} AND join_state = 0
	</select>
	
	<!-- 참가번호로 캐릭터 시트 내용 가져옴 -->
	<select id="find_joininfo" parameterType="Integer" resultType="java.util.HashMap">
		SELECT 
				c.char_propensity char_propensity
				,c.species species
				,c.char_class char_class
				,c.char_name char_name
				,j.id id
				,j.join_num join_num
		FROM character_sheet c 
		LEFT OUTER JOIN `join` j
		ON j.join_num = c.join_num
		WHERE j.join_num = #{list}
	</select>
	
	<!-- 참가번호로 캐릭터 시트 가져옴 -->
	<select id="char_sheet_confirm" parameterType="Integer" resultType="java.util.HashMap">
		SELECT 
				j.id id
				,j.join_num join_num
				,chat.room_name room_name
				,v.inventory_num inventory_num
				,v.money money
				,c.sheet_num sheet_num
				,c.char_name char_name
				,c.char_propensity char_propensity
				,c.char_class char_class
				,c.species species
				,c.str str
				,c.dex dex
				,c.con con
				,c.intelligence intelligence
				,c.wis wis
				,c.chr chr
				,c.char_explain char_explain
				,c.char_etc char_etc
		FROM character_sheet c 
		LEFT OUTER JOIN `join` j 		ON j.join_num = c.join_num
		LEFT OUTER JOIN chating chat 	ON j.room_num = chat.room_num
		LEFT OUTER JOIN inventory v 	ON j.join_num = v.join_num
		WHERE j.join_num = #{join_num}
	</select>
	
	<!-- 시트넘버로 스킬 여러개 가져옴 -->
	<select id="skills" parameterType="Integer" resultType="java.util.HashMap">
		SELECT s.skill_name skill_name, s.skill_detail skill_detail
		FROM character_sheet c 
		LEFT OUTER JOIN skill s 		ON c.sheet_num = s.sheet_num
		WHERE c.sheet_num = #{sheet_num}
	</select>
	
	<!-- 인벤토리넘버로 아이템 여러개 가져옴 -->
	<select id="items" parameterType="Integer" resultType="java.util.HashMap">
			SELECT 
				 i.item_name  		item_name
				,i.item_amount 		item_amount
				,i.item_weight 		item_weight
				,i.item_detail  	item_detail
				,i.equip_state  	equip_state
		FROM item i
		LEFT OUTER JOIN inventory v		ON v.inventory_num  = i.inventory_num
		WHERE v.inventory_num = #{inventory_num}
	</select>
	<!-- 해당 넘버의 참가번호를 찾아 상태를 참가로 변경  -->
	 <update id="agree_brother" parameterType="Integer">
		UPDATE 	 `join` 
		SET		 join_state		= 1
		WHERE 	 join_num = #{join_num}
	</update>
	
	<update id="inc_curr_member" parameterType="Integer">
		UPDATE chating
		SET curr_member = (SELECT curr_member+1 FROM chating WHERE room_num = #{room_num})
		WHERE room_num = #{room_num}
	</update>
<!-- =========== END of 게임관리 ======================================================================================================	 -->
<!-- =========== START of 나의 게시물 ======================================================================================================	 -->
	<select id="my_post" parameterType="PostDTO" resultType="java.util.HashMap">
		SELECT * 
		FROM post
		WHERE id = #{id} AND post_state =0
	</select>
	
	<select id="my_post2" parameterType="PostDTO" resultType="java.util.HashMap">
		SELECT * 
		FROM post
		<if test="subject == 'all' ">
		WHERE id = #{id} AND post_state =0
		</if>
		
		<if test="subject != 'all' ">
		WHERE id = #{id} AND subject = #{subject} AND post_state =0
		</if>
	</select>
    <update id="deletePosts" parameterType="String">
		UPDATE 	 post 
		SET		 post_state		= 1
		WHERE 	 post_num = #{postNums}
	</update>
<!-- =========== END of 나의 게시물 ======================================================================================================	 -->

<!-- =========== START of 회원정보 ======================================================================================================	 -->
<!-- 희원정보창들어갔을때 아이디체크 -->
	<select id="mypage_password_check" parameterType="MemberDTO" resultType="String">
		SELECT password FROM member
		WHERE id=#{id} 
	</select>
	
<!-- 회원정보 가져오기 -->
	<select id="find_info" parameterType="MemberDTO" resultType="Map">
		SELECT name,address,tel,email,nickname,birthday,introduce
		FROM member
		WHERE id=#{id}
	</select>
	
<!-- 회원정보 수정 -->
	<update id="modify_info" parameterType="MemberDTO">
		UPDATE 	 member 
		SET		 name		= #{name}
				,nickname	= #{nickname}
				,address	= #{address}
				,tel		= #{tel}
				,introduce 	= #{introduce}
		WHERE 	 id = #{id}
	</update>
	
<!-- 프로필 사진 입력 -->
	<insert id="modify_info_img" parameterType = "java.util.HashMap">
		INSERT INTO image (origin_img_name, path, id) 
		VALUES (#{originFilename}, #{filepath}, #{id})	
	</insert>
	
<!-- 프로필 사진 있으면 삭제 -->
	<delete id="modify_info_imgDelete" parameterType = "java.util.HashMap">
		DELETE FROM image 
		WHERE id = #{id}
	</delete>

<!-- 프로필 사진 불러오기 -->
	<select id ="find_info_img" parameterType="MemberDTO" resultType="String">
		SELECT path
		FROM image
		WHERE id = #{id}
	</select>
	
	<select id ="my_playlist" parameterType="MemberDTO" resultType="Integer">
		SELECT room_num
		FROM `join`
		WHERE id = #{id} AND join_state != 2
	</select>
<!-- =========== END of 회원정보 ======================================================================================================	 -->
<!-- =========== START of 나의 친구관리 ======================================================================================================	 -->
	<select id="friend" parameterType="String" resultType="FriendDTO">
		SELECT friend_id
		FROM friend
		WHERE my_id=#{id} AND friend_state = 0
	</select>
	<select id="checked" parameterType="String" resultType="MemberDTO">
		SELECT dist_search, name_search
		FROM member
		WHERE id=#{id}
	</select>
	<select id="search_friend_id" parameterType="String" resultType="MemberDTO">
      SELECT id 
      FROM member 
      WHERE	(
      			id  		LIKE CONCAT('%',#{id},'%') 
      		OR 	nickname  	LIKE CONCAT('%',#{id},'%')
      		OR 	name		LIKE CONCAT('%',#{id},'%')
			)
			AND name_search = 0
   </select>
   
   
   
   <!-- 검색허용 여부 -->
   	<update id="dist_search0" parameterType="String">
		UPDATE 	 member SET dist_search = 0 WHERE id = #{id}
	</update>
	<update id="dist_search1" parameterType="String">
		UPDATE 	 member SET dist_search = 1 WHERE id = #{id}
	</update>
	<update id="name_search0" parameterType="String">
		UPDATE 	 member SET name_search = 0 WHERE id = #{id}
	</update>
	   	<update id="name_search1" parameterType="String">
		UPDATE 	 member SET name_search = 1 WHERE id = #{id}
	</update>
	
	
	
   <!-- 친구정보 가져오기 -->
	<select id="friend_profile" parameterType="MemberDTO" resultType="MemberDTO">
		SELECT id,name,nickname,introduce
		FROM member
		WHERE id=#{id}
	</select>
	<!-- 친구프로필 사진 불러오기 -->
	<select id ="friend_img" parameterType="String" resultType="String">
		SELECT path
		FROM image
		WHERE id = #{id}
	</select>
	<!-- 친구추가 입력 -->
	<insert id="make_friend" parameterType = "FriendDTO">
		INSERT INTO friend (my_id, friend_id) 
		VALUES (#{my_id}, #{friend_id})	
	</insert>
	
	<!-- 친구삭제 -->
	<update id="no_friend" parameterType = "FriendDTO">
		UPDATE 	 friend 
		SET friend_state = 1 
		WHERE my_id = #{my_id} AND friend_id = #{friend_id}
	</update>
	
	<select id ="friend_playlist" parameterType="String" resultType="Integer">
		SELECT room_num
		FROM `join`
		WHERE id = #{id} AND join_state = 1
	</select>
	<select id ="find_gamename" parameterType="Integer" resultType="java.util.HashMap">
		SELECT 	room_num, room_name, next_play_date, watching, room_state
		FROM chating
		WHERE room_num = #{num}
	</select>
<!-- =========== END of 나의 친구관리 ======================================================================================================	 -->

<!-- =========== START of 나의 문의사항 ======================================================================================================	 -->
	<select id="find_question" resultType="QuestionDTO">
      SELECT * FROM question WHERE id=#{id}
   </select>
<!-- =========== END of 나의 문의사항 ======================================================================================================	 -->
</mapper>
