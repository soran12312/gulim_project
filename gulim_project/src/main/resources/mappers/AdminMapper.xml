<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="project.gulim.dao.AdminDAO">
	
	<!-- 문의사항 리스트 보기 -->
	<select id="listQuestion" resultType="QuestionDTO">
	    select *
	    from question
	    order by question_num DESC
	</select>
		
	<!-- 문의사항 답변하기 -->
	<update id="answerQuestion" parameterType="QuestionDTO">
		UPDATE question SET answer=#{answer}, answer_state=1 WHERE question_num=#{question_num}
	</update>
	
	<!-- 제재 리스트 보기 -->
	<select id="listMember" resultType="MemberDTO">
		select id, nickname, member_state
		from member
	</select>
	
	<!-- 제재 상태 변경 -->
	<update id="changeMemberState" parameterType="MemberDTO">
		update member set member_state=#{member_state} where id=#{id};
	</update>
	
	<!-- 모임장소 리스트 보기 -->
	<select id="listPlace" resultType="PlaceDTO">
	    select *
	    from place
	</select>
	
	<!-- 판매 통계: 전체 연매출 -->
	<select id="salesStatsYear" resultType="HashMap">
		WITH combined_sales AS (
		    SELECT YEAR(bk.purchase_date) AS purchase_year, 
		           SUM(b.price * p.amount) AS book_price, 
		           0 AS subscribe_price
		    FROM purchase p
		    INNER JOIN book b ON p.book_num = b.book_num
		    INNER JOIN basket bk ON p.basket_num = bk.basket_num
		    WHERE p.purchase_state = 1
		    GROUP BY YEAR(bk.purchase_date)
		
		    UNION ALL
		
		    SELECT YEAR(s.sub_date) AS purchase_year, 
		           0 AS book_price, 
		           SUM(s.price * p.amount) AS subscribe_price
		    FROM subscribe s
		    INNER JOIN purchase p ON s.sub_num = p.sub_num  
		    WHERE p.purchase_state = 1
		    GROUP BY YEAR(s.sub_date)
		)
		SELECT purchase_year, 
		       SUM(book_price) AS total_book_price, 
		       SUM(subscribe_price) AS total_subscribe_price,
		       SUM(book_price) + SUM(subscribe_price) AS total_price
		FROM combined_sales
		GROUP BY purchase_year
		ORDER BY purchase_year desc
	</select>
	
	<!-- 판매 통계: 구독권별 연매출 -->
	<select id="salesStatsYear_subs" resultType="HashMap">
		select YEAR(s.sub_date) as sub_date, s.price, SUM(s.price * p.amount) as total_subscribe_price
		from subscribe s inner join purchase p on s.sub_num = p.sub_num 
		WHERE sub_state=1
		group by YEAR(sub_date), price
	</select>
	
	<!-- 판매 통계: 설정집별 연매출 -->
	<!-- 판매순위 4위부터는 기타로 분류 -->
	<select id="salesStatsYear_book" resultType="HashMap">
		SELECT 
		    purchase_date,
		    CASE
		        WHEN rank &lt;= 3 THEN book_title
		        ELSE '기타'
		    END AS book_title,
		    SUM(total_book_price) AS total_book_price
		FROM
		    (SELECT 
		        purchase_date,
		        book_title,
		        total_book_price,
		        RANK() OVER (PARTITION BY purchase_date ORDER BY total_book_price DESC) AS rank
		    FROM (
		        SELECT 
		            YEAR(bk.purchase_date) AS purchase_date,
		            b.book_title AS book_title,
		            SUM(b.price*p.amount) AS total_book_price
		        FROM 
		            purchase p
		            INNER JOIN book b ON p.book_num = b.book_num
		            INNER JOIN basket bk ON p.basket_num = bk.basket_num
		        where p.purchase_state =1
		        GROUP BY 
		            YEAR(bk.purchase_date), b.book_title
		    ) AS subquery1
		) AS final_subquery
		GROUP BY
		    purchase_date, CASE WHEN rank &lt;=3 THEN book_title ELSE '기타' END
		ORDER BY
		    purchase_date, total_book_price desc
	</select>
	
	<!-- 판매 통계: 연도 선택(분기) -->
	<select id="selectYear" resultType="HashMap">
		WITH combined_year AS (
		  SELECT YEAR(purchase_date) AS selectedYear
		  FROM basket
		
		  UNION ALL
		
		  SELECT YEAR(sub_date) AS selectedYear
		  FROM subscribe
		)
		SELECT selectedYear
		FROM combined_year
		group by selectedYear
		ORDER BY selectedYear DESC
	</select>
	
	<!-- 판매 통계: 연도 선택(월) -->
	<select id="selectYear_mon" resultType="HashMap">
		WITH combined_year AS (
		  SELECT YEAR(purchase_date) AS selectedYear
		  FROM basket
		
		  UNION ALL
		
		  SELECT YEAR(sub_date) AS selectedYear
		  FROM subscribe
		)
		SELECT selectedYear
		FROM combined_year
		group by selectedYear
		ORDER BY selectedYear DESC
	</select>
	
	<!-- 판매 통계: 전체 월매출 -->
	<select id="salesStatsMonth" parameterType="String" resultType="HashMap">
		WITH combined_sales AS (
		    SELECT YEAR(bk.purchase_date) AS purchase_year_mon, 
		    	   MONTH(bk.purchase_date) as purchase_month,
		           SUM(b.price*p.amount) AS book_price, 
		           0 AS subscribe_price
		    FROM purchase p
		    INNER JOIN book b ON p.book_num = b.book_num
		    INNER JOIN basket bk ON p.basket_num = bk.basket_num
		    WHERE p.purchase_state = 1
		    GROUP BY YEAR(bk.purchase_date), MONTH(bk.purchase_date)
		
		    UNION ALL
		
		    SELECT YEAR(s.sub_date) AS purchase_year_mon,
		    	   MONTH(s.sub_date) as purchase_month,
		           0 AS book_price, 
		           SUM(s.price*p.amount) AS subscribe_price
		    FROM subscribe s
		    INNER join purchase p ON p.sub_num =s.sub_num 
		    WHERE p.purchase_state = 1
		    GROUP BY YEAR(s.sub_date), MONTH(s.sub_date)
		)
		SELECT purchase_year_mon, 
			   purchase_month,
		       SUM(book_price) AS total_book_price, 
		       SUM(subscribe_price) AS totalscribe_price,
		       SUM(book_price) + SUM(subscribe_price) AS total_price
		FROM combined_sales
		WHERE purchase_year_mon = #{purchase_year_mon}
		GROUP BY purchase_year_mon, purchase_month
		ORDER BY purchase_year_mon DESC, purchase_month ASC
	</select>
	
	<!-- 판매 통계: 구독권별 월매출 -->
	<select id="salesStatsMonth_subs" parameterType="String" resultType="HashMap">
		select MONTH(s.sub_date) as purchase_month, s.price, SUM(s.price * p.amount) as total_subscribe_price
		from subscribe s inner join purchase p on s.sub_num = p.sub_num 
		where p.purchase_state =1 and YEAR(s.sub_date) = #{purchase_year_mon}
		group by MONTH(s.sub_date), s.price		
	</select>
	
	<!-- 판매 통계: 설정집별 월매출 -->
	<select id="salesStatsMonth_book" parameterType="String" resultType="HashMap">
		SELECT 
			purchase_month,
			CASE
			    WHEN rank &lt;= 3 THEN book_title
			    ELSE '기타'
			END AS book_title,
			SUM(total_book_price) AS total_book_price
		FROM
			(SELECT 
			    purchase_month,
			    book_title,
			    total_book_price,
			    RANK() OVER (PARTITION BY purchase_month ORDER BY total_book_price DESC) AS rank
			FROM (
			        SELECT 
			            MONTH(bk.purchase_date) AS purchase_month,
			            b.book_title AS book_title,
			            SUM(b.price*p.amount) AS total_book_price
			        FROM 
			            purchase p
			            INNER JOIN book b ON p.book_num = b.book_num
			            INNER JOIN basket bk ON p.basket_num = bk.basket_num
			        where p.purchase_state =1 AND year(bk.purchase_date) = #{purchase_year_mon}
			        GROUP BY 
			            MONTH(bk.purchase_date), b.book_title
			    ) AS subquery1
			) AS final_subquery
			GROUP BY
			    purchase_month, CASE WHEN rank &lt;= 3 THEN book_title ELSE '기타' END
			ORDER BY
			    purchase_month, total_book_price desc
	</select>
	
	<!-- 판매 통계: 전체 일매출 -->
	<select id="salesStatsDay" parameterType="String" resultType="HashMap">
		WITH combined_sales AS (
		    SELECT bk.purchase_date as purchase_day,
		           SUM(b.price*p.amount) AS book_price, 
		           0 AS subscribe_price
		    FROM purchase p
		    INNER JOIN book b ON p.book_num = b.book_num
		    INNER JOIN basket bk ON p.basket_num = bk.basket_num
		    where p.purchase_state =1
		    group by bk.purchase_date 
		
		    UNION ALL
		
		    SELECT s.sub_date as purchase_day,
		           0 AS book_price, 
		           SUM(s.price*p.amount) AS subscribe_price
		    FROM subscribe s 
		    inner join purchase p on p.sub_num = s.sub_num
		    where p.purchase_state =1
		    group by s.sub_date 
		)
		SELECT purchase_day,
		       SUM(book_price) AS total_book_price, 
		       SUM(subscribe_price) AS totalscribe_price,
		       SUM(book_price) + SUM(subscribe_price) AS total_price
		FROM combined_sales
		WHERE purchase_day = #{purchase_day}
		GROUP BY purchase_day
		ORDER BY purchase_day asc
	</select>
	
	<!-- 판매 통계: 구독권별 일매출 -->
	<select id="salesStatsDay_subs" parameterType="String" resultType="HashMap">
		select s.price price, s.sub_date as purchase_month, SUM(s.price*p.amount) as total_subscribe_price
		from subscribe s
		inner join purchase p on s.sub_num = p.sub_num 
		where p.purchase_state =1 and s.sub_date = #{sub_date}
		group by price
	</select>
	
	<select id="salesStatsDay_book" parameterType="String" resultType="HashMap">
		SELECT 
			purchase_day,
			CASE
			    WHEN rank &lt;= 3 THEN book_title
			    ELSE '기타'
			END AS book_title,
			SUM(total_book_price) AS total_book_price
		FROM
			(SELECT 
			    purchase_day,
			    book_title,
			    total_book_price,
			    RANK() OVER (PARTITION BY purchase_day ORDER BY total_book_price DESC) AS rank
			FROM (
			        SELECT 
			            bk.purchase_date AS purchase_day,
			            b.book_title AS book_title,
			            SUM(b.price*p.amount) AS total_book_price
			        FROM 
			            purchase p
			            INNER JOIN book b ON p.book_num = b.book_num
			            INNER JOIN basket bk ON p.basket_num = bk.basket_num
			        where p.purchase_state =1 AND bk.purchase_date = #{purchase_day}
			        GROUP BY 
			            bk.purchase_date, b.book_title
			    ) AS subquery1
			) AS final_subquery
			GROUP BY
			    purchase_day, CASE WHEN rank &lt;= 3 THEN book_title ELSE '기타' END
			ORDER BY
			    purchase_day, total_book_price desc	
	</select>

	<!-- 배송/환불 리스트 보기 -->
	<select id="listRefund" resultType="HashMap">
		SELECT bk.basket_num basket_num, bk.purchase_date purchase_date,
		    CONCAT(b.book_title, IF((SELECT COUNT(*) FROM purchase WHERE basket_num = bk.basket_num) > 1, CONCAT(' 외 ', (SELECT COUNT(*) FROM purchase WHERE basket_num = bk.basket_num) - 1, '권'), '')) book_title,
		    bk.id id, bk.delivery_state delivery_state,
		    SUM(b.price) price
		FROM purchase p
		INNER JOIN book b ON p.book_num = b.book_num
		INNER JOIN basket bk ON p.basket_num = bk.basket_num
		GROUP BY bk.basket_num
		ORDER BY p.purchase_num DESC
	</select>
	
	<!-- 배송/환불 상태 변경 -->
	<update id="changeDeliveryState" parameterType="BasketDTO">
		update basket set delivery_state=#{delivery_state} where basket_num=#{basket_num}
	</update>
	
	<!-- 관리자 글목록 리스트 보기 -->
	<select id="listPost" resultType="HashMap">
		select p.post_num post_num, c.contest_title contest_title, p.board board, p.post_title post_title, p.post_state post_state, p.writing_date writing_date, c.start_date start_date, c.end_date end_date
		from post p left outer join contest c on p.contest_num = c.contest_num
		ORDER BY p.post_num DESC
	</select>
	
	<!-- 관리자 글 등록상태 변경 -->
	<update id="changePostState" parameterType="PostDTO">
		update post set post_state=#{post_state} where post_num=#{post_num}
	</update>
	
	<select id="getPost" parameterType="PostDTO" resultType="HashMap">
		select p.post_num post_num, c.contest_title contest_title, c.contest_content contest_content, p.board board, p.post_title post_title, p.post_content post_content, p.post_state post_state, p.writing_date writing_date, c.start_date start_date, c.end_date end_date, i.origin_img_name origin_img_name, i.path path
		from post p left outer join contest c on p.contest_num = c.contest_num
					left outer join image i on p.post_num = i.post_num
		where p.post_num = #{post_num}
		ORDER BY p.post_num desc
	</select>
	
	
	<!-- 관리자 공지사항/이벤트 insert 1 -->
	<insert id="insert_evt_post" parameterType="PostDTO">
		insert into post(post_title, id, writing_date, post_content, board, subject, view_count, post_state) VALUES(#{post_title}, #{id}, CURDATE(), #{post_content}, #{board}, #{board}, 0, 0)
	</insert>
	
	<!-- 관리자 공지사항/이벤트 insert 2 -->
	<insert id="insert_evt_image" parameterType="ImageDTO">
		insert into image(origin_img_name, path, img_size, post_num, id) VALUES(#{origin_img_name}, #{path}, #{img_size}, (SELECT MAX(post_num)FROM post), #{id})
	</insert>
	
	<!-- 관리자 공모전 insert 1 -->
	<insert id="insert_con_post" parameterType="PostDTO">
		insert into post(id, writing_date, board, subject, view_count, post_state, contest_num) 
		VALUES(#{id}, CURDATE(), #{board}, #{board}, 0, 0, (SELECT MAX(contest_num)FROM contest))
	</insert>
	
	<!-- 관리자 공모전 insert 2 -->
	<insert id="insert_con_image" parameterType="ImageDTO">
		insert into image(origin_img_name, path, img_size, post_num, id) 
		VALUES(#{origin_img_name}, #{path}, #{img_size}, (SELECT MAX(post_num)FROM post), #{id})
	</insert>
	
	<!-- 관리자 공모전 insert 3 -->
	<insert id="insert_con_contest" parameterType="ContestDTO">
		insert into contest(contest_title, contest_content, start_date, end_date) 
		VALUES(#{contest_title}, #{contest_content}, #{start_date}, #{end_date})
	</insert>
	
	<!-- 등록된 상품 리스트 보기 -->
	<select id="listProduct" resultType="HashMap">
		select i.path path, b.book_num book_num, b.book_title book_title, b.sale_state sale_state, b.stock stock
		from book b left outer join image i on b.book_num = i.book_num
	</select>
	
	<!-- 상품 불러오기 -->
	<select id="getProduct" parameterType="BookDTO" resultType="HashMap">
		select i.origin_img_name origin_img_name, i.path path, b.book_num book_num, b.book_title book_title, b.writer writer, b.translation translation, b.issue_date issue_date, b.price price, b.stock stock, b.simple_info simple_info, b.sale_state sale_state, b.adult adult, b.book_detail book_detail
		from book b left outer join image i on b.book_num = i.book_num
		where b.book_num = #{book_num}
	</select>
	
	<!-- 상품 수정하기(설정집 정보) -->
	<update id="updateProductBook" parameterType="BookDTO">
		UPDATE book 
		SET book_title=#{book_title}, writer=#{writer}, translation=#{translation}, issue_date=#{issue_date}, genre=#{genre}
						, price=#{price}, stock=#{stock}, simple_info=#{simple_info}, sale_state=#{sale_state}
						, adult=#{adult}, book_detail=#{book_detail}
		WHERE book_num = #{book_num}
	</update>
	
	<!-- 상품 수정하기(이미지 경로) -->
	<update id="updateProductImage" parameterType="ImageDTO">
		UPDATE image
		SET path=#{path}, origin_img_name=#{origin_img_name}
		WHERE book_num=#{book_num}
	</update>
	
	<!-- 상품 등록하기 -->
	<insert id="insertProductBook" parameterType="BookDTO">
		INSERT INTO book(book_title, writer, translation, issue_date, genre
						 , price, stock, simple_info, sale_state, adult, book_detail)
		VALUES(#{book_title}, #{writer}, #{translation}, #{issue_date}, #{genre}
			    , #{price}, #{stock}, #{simple_info}, #{sale_state}, #{adult}, #{book_detail})
	</insert>
	
	<!-- 상품 등록하기(이미지 경로) -->
	<update id="insertProductImage" parameterType="ImageDTO">
		INSERT INTO image(path, origin_img_name, book_num)
		VALUES (#{path}, #{origin_img_name}, (SELECT MAX(book_num)FROM book))
	</update>
	
	<!-- 직업 종류 (select 드롭박스용) -->
	<select id="classForStats" resultType="HashMap">
		select char_class
		from character_sheet
		group by char_class
	</select>

</mapper>
