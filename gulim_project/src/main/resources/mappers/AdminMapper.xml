<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="project.gulim.dao.AdminDAO">
	
	<!-- 문의사항 리스트 보기 -->
	<select id="listQuestion" resultType="QuestionDTO">
	    select *
	    from question
	    order by question_num DESC
	</select>
		
	<!-- 문의사항 답변하기 -->
	<update id="answerQuestion" parameterType="QuestionDTO">
		UPDATE question SET answer=#{answer}, answer_state=1 WHERE question_num=#{question_num}
	</update>
	
	<!-- 제재 리스트 보기 -->
	<select id="listMember" resultType="MemberDTO">
		select id, nickname, member_state
		from member
	</select>
	
	<!-- 제재 상태 변경 -->
	<update id="changeMemberState" parameterType="MemberDTO">
		update member set member_state=#{member_state} where id=#{id};
	</update>
	
	<!-- 모임장소 리스트 보기 -->
	<select id="listPlace" resultType="PlaceDTO">
	    select *
	    from place
	</select>
	
	<!-- 배송/환불 리스트 보기 -->
	<select id="listRefund" resultType="HashMap">
		SELECT bk.basket_num basket_num, bk.purchase_date purchase_date,
		    CONCAT(b.book_title, IF((SELECT COUNT(*) FROM purchase WHERE basket_num = bk.basket_num) > 1, CONCAT(' 외 ', (SELECT COUNT(*) FROM purchase WHERE basket_num = bk.basket_num) - 1, '권'), '')) book_title,
		    bk.id id, bk.delivery_state delivery_state,
		    SUM(b.price) price
		FROM purchase p
		INNER JOIN book b ON p.book_num = b.book_num
		INNER JOIN basket bk ON p.basket_num = bk.basket_num
		GROUP BY bk.basket_num
		ORDER BY p.purchase_num DESC
	</select>
	
	<!-- 배송/환불 상태 변경 -->
	<update id="changeDeliveryState" parameterType="BasketDTO">
		update basket set delivery_state=#{delivery_state} where basket_num=#{basket_num}
	</update>
	
	<!-- 관리자 글목록 리스트 보기 -->
	<select id="listPost" resultType="HashMap">
		select p.post_num post_num, p.board board, p.post_title post_title, p.post_state post_state, p.writing_date writing_date, c.start_date start_date, c.end_date end_date
		from post p left outer join contest c on p.contest_num = c.contest_num
		ORDER BY p.post_num DESC
	</select>
	
	<!-- 관리자 글 등록상태 변경 -->
	<update id="changePostState" parameterType="PostDTO">
		update post set post_state=#{post_state} where post_num=#{post_num}
	</update>
	
	<!-- 관리자 글 작성 1 -->
	<insert id="insert_1" parameterType="ContestDTO">
		insert into contest(contest_title, contest_content, start_date, end_date) VALUES(#{contest_title}, #{contest_content}, #{start_date}, #{end_date})
	</insert>
	
	<!-- 관리자 글 작성 2 -->
	<insert id="insert_2" parameterType="PostDTO">
		insert into post(board, subject, contest_num) VALUES(#{board}, #{subject}, #{contest_num})
	</insert>
	
	<!-- 관리자 글 작성 3 -->
	<insert id="insert_3" parameterType="ImageDTO">
		insert into image(origin_img_name, path, img_size, post_num) VALUES(#{origin_img_name}, #{path}, #{img_size}, #{post_num})
	</insert>
	
	<!-- 등록된 상품 리스트 보기 -->
	<select id="listProduct" resultType="HashMap">
		select i.path path, b.book_title book_title, b.sale_state sale_state, b.stock stock
		from book b left outer join image i on b.book_num = i.book_num
	</select>
	
	<!-- 선호도 통계: 플레이해본 룰북 -->
	<select id="playedRuleBook" resultType="HashMap" >
		WITH top6 AS (
		    SELECT play_rull
		    FROM survey
		    GROUP BY play_rull
		    ORDER BY COUNT(play_rull) DESC
		    LIMIT 6
		)
		SELECT 
		    CASE 
		        WHEN play_rull IN (SELECT play_rull FROM top6) 
		        THEN play_rull 
		        ELSE '기타' 
		    END AS play_rull, 
		    COUNT(play_rull) AS count_play_rull
		FROM (
		    SELECT 
		        CASE 
		            WHEN play_rull IN (SELECT play_rull FROM top6) 
		            THEN play_rull 
		            ELSE '기타' 
		        END AS play_rull
		    FROM survey
		) AS modified_data
		GROUP BY play_rull
		ORDER BY count_play_rull DESC
	</select>

	<!-- 선호도 통계: 플레이 기간 -->
	<select id="playedTime" resultType="HashMap">
	  SELECT
	    IF(s.play_period &lt; 1, '0시간',
	      IF(s.play_period &gt;= 1 AND s.play_period &lt; 3, '1~3시간',
	        IF(s.play_period &gt;= 3 AND s.play_period &lt; 6, '3~6시간',
	          IF(s.play_period &gt;= 6 AND s.play_period &lt; 10, '6~10시간',
	            IF(s.play_period &gt;= 10, '10시간 이상', '')
	          )
	        )
	      )
	    ) AS play_period,
	    COUNT(*) AS count_play_period
	  FROM survey s
	  GROUP BY
	    IF(s.play_period &lt; 1, '0시간',
	      IF(s.play_period &gt;= 1 AND s.play_period &lt; 3, '1~3시간',
	        IF(s.play_period &gt;= 3 AND s.play_period &lt; 6, '3~6시간',
	          IF(s.play_period &gt;= 6 AND s.play_period &lt; 10, '6~10시간',
	            IF(s.play_period &gt;= 10, '10시간 이상', '')
	          )
	        )
	      )
	    )
	  ORDER BY count_play_period DESC
	</select>

	
	<!-- 선호도 통계: 게임마스터 횟수 -->
	<select id="playedGm" resultType="HashMap" >
		SELECT
		    IF(s.master = 0, '0회',
		      IF(s.master &gt;= 1 AND s.master &lt;= 2, '1~2회',
		        IF(s.master &gt;= 3 AND s.master &lt;= 4, '3~4회',
		          IF(s.master &gt;= 5, '5회 이상', '')
		        )
		      )
		    ) AS master
	    	, COUNT(*) AS count_master
		FROM survey s
		GROUP BY
		    IF(s.master = 0, '0회',
		      IF(s.master &gt;= 1 AND s.master &lt;= 2, '1~2회',
		        IF(s.master &gt;= 3 AND s.master &lt;= 4, '3~4회',
		          IF(s.master &gt;= 5, '5회 이상', '')
		        )
		      )
		    )
	</select>
	
	<!-- 선호도 통계: 플레이해본 직업 -->
	<select id="playedClass" resultType="HashMap">
		SELECT 
		    CASE 
		        WHEN play_class IN (
		            SELECT play_class 
		            FROM (
		                SELECT play_class, COUNT(play_class) AS count_play_class
		                FROM survey
		                GROUP BY play_class
		                ORDER BY count_play_class DESC
		                LIMIT 6
		            ) AS top6
		        ) THEN play_class
		        ELSE '기타'
		    END AS play_class,
		    SUM(count_play_class) AS count_play_class
		FROM (
		    SELECT 
		        CASE 
		            WHEN play_class IN (
		                SELECT play_class 
		                FROM (
		                    SELECT play_class, COUNT(play_class) AS count_play_class
		                    FROM survey
		                    GROUP BY play_class
		                    ORDER BY count_play_class DESC
		                    LIMIT 6
		                ) AS top6
		            ) THEN play_class
		            ELSE '기타'
		        END AS play_class,
		        COUNT(play_class) AS count_play_class
		    FROM survey
		    GROUP BY play_class
		) AS grouped_data
		GROUP BY play_class
		ORDER BY count_play_class DESC
	</select>
	
	<!-- 선호도 통계: 플레이해본 장르 -->
	<select id="playedGenre" resultType="HashMap">
		SELECT 
		    CASE 
		        WHEN play_genre IN (
		            SELECT play_genre 
		            FROM (
		                SELECT play_genre, COUNT(play_genre) AS count_play_genre
		                FROM survey
		                GROUP BY play_genre
		                ORDER BY count_play_genre DESC
		                LIMIT 6
		            ) AS top6
		        ) THEN play_genre
		        ELSE '기타'
		    END AS play_genre,
		    SUM(count_play_genre) AS count_play_genre
		FROM (
		    SELECT 
		        CASE 
		            WHEN play_genre IN (
		                SELECT play_genre 
		                FROM (
		                    SELECT play_genre, COUNT(play_genre) AS count_play_genre
		                    FROM survey
		                    GROUP BY play_genre
		                    ORDER BY count_play_genre DESC
		                    LIMIT 6
		                ) AS top6
		            ) THEN play_genre
		            ELSE '기타'
		        END AS play_genre,
		        COUNT(play_genre) AS count_play_genre
		    FROM survey
		    GROUP BY play_genre
		) AS grouped_data
		GROUP BY play_genre
		ORDER BY count_play_genre DESC
	</select>
	
	<!-- 선호도 통계: 플레이해본 종족 -->
	<select id="playedSpecies" resultType="HashMap">
		SELECT 
		    CASE 
		        WHEN play_species IN (
		            SELECT play_species 
		            FROM (
		                SELECT play_species, COUNT(play_species) AS count_play_species
		                FROM survey
		                GROUP BY play_species
		                ORDER BY count_play_species DESC
		                LIMIT 6
		            ) AS top6
		        ) THEN play_species
		        ELSE '기타'
		    END AS play_species,
		    SUM(count_play_species) AS count_play_species
		FROM (
		    SELECT 
		        CASE 
		            WHEN play_species IN (
		                SELECT play_species 
		                FROM (
		                    SELECT play_species, COUNT(play_species) AS count_play_species
		                    FROM survey
		                    GROUP BY play_species
		                    ORDER BY count_play_species DESC
		                    LIMIT 6
		                ) AS top6
		            ) THEN play_species
		            ELSE '기타'
		        END AS play_species,
		        COUNT(play_species) AS count_play_species
		    FROM survey
		    GROUP BY play_species
		) AS grouped_data
		GROUP BY play_species
		ORDER BY count_play_species DESC
	</select>
	
	<!-- 선호도 통계: 플레이해보고 싶은 장르 -->
	<select id="wantedGenre" resultType="HashMap">
		SELECT 
		    CASE 
		        WHEN want_genre IN (
		            SELECT want_genre 
		            FROM (
		                SELECT want_genre, COUNT(want_genre) AS count_want_genre
		                FROM survey
		                GROUP BY want_genre
		                ORDER BY count_want_genre DESC
		                LIMIT 6
		            ) AS top6
		        ) THEN want_genre
		        ELSE '기타'
		    END AS want_genre,
		    SUM(count_want_genre) AS count_want_genre
		FROM (
		    SELECT 
		        CASE 
		            WHEN want_genre IN (
		                SELECT want_genre 
		                FROM (
		                    SELECT want_genre, COUNT(want_genre) AS count_want_genre
		                    FROM survey
		                    GROUP BY want_genre
		                    ORDER BY count_want_genre DESC
		                    LIMIT 6
		                ) AS top6
		            ) THEN want_genre
		            ELSE '기타'
		        END AS want_genre,
		        COUNT(want_genre) AS count_want_genre
		    FROM survey
		    GROUP BY want_genre
		) AS grouped_data
		GROUP BY want_genre
		ORDER BY count_want_genre DESC
	</select>
	
	<!-- 선호도 통계: 다른 사이트 이용 경험 -->
	<select id="otherSite" resultType="HashMap">
		select other_site, count(other_site) count_other_site
		from survey
		group by other_site
		order by count(other_site) DESC
	</select>
	
	<!-- 인게임 통계: 플레이어 성향 -->
	<select id="preferredPropensity" resultType="HashMap">
		SELECT 
		    CASE 
		        WHEN char_propensity IN (
		            SELECT char_propensity 
		            FROM (
		                SELECT char_propensity, COUNT(char_propensity) AS count_char_propensity
		                FROM character_sheet
		                GROUP BY char_propensity
		                ORDER BY count_char_propensity DESC
		                LIMIT 6
		            ) AS top6
		        ) THEN char_propensity
		        ELSE '기타'
		    END AS char_propensity,
		    SUM(count_char_propensity) AS count_char_propensity
		FROM (
		    SELECT 
		        CASE 
		            WHEN char_propensity IN (
		                SELECT char_propensity 
		                FROM (
		                    SELECT char_propensity, COUNT(char_propensity) AS count_char_propensity
		                    FROM character_sheet
		                    GROUP BY char_propensity
		                    ORDER BY count_char_propensity DESC
		                    LIMIT 6
		                ) AS top6
		            ) THEN char_propensity
		            ELSE '기타'
		        END AS char_propensity,
		        COUNT(char_propensity) AS count_char_propensity
		    FROM character_sheet
		    GROUP BY CASE 
		            WHEN char_propensity IN (
		                SELECT char_propensity 
		                FROM (
		                    SELECT char_propensity, COUNT(char_propensity) AS count_char_propensity
		                    FROM character_sheet
		                    GROUP BY char_propensity
		                    ORDER BY count_char_propensity DESC
		                    LIMIT 6
		                ) AS top6
		            ) THEN char_propensity
		            ELSE '기타'
		        END
		) AS grouped_data
		GROUP BY char_propensity
		ORDER BY count_char_propensity DESC
		</select>
	
	<!-- 인게임 통계: 직업 선호 -->
	<select id="preferredClass" resultType="HashMap">
		SELECT 
		    CASE 
		        WHEN char_class IN (
		            SELECT char_class 
		            FROM (
		                SELECT char_class, COUNT(char_class) AS count_char_class
		                FROM character_sheet
		                GROUP BY char_class
		                ORDER BY count_char_class DESC
		                LIMIT 6
		            ) AS top6
		        ) THEN char_class
		        ELSE '기타'
		    END AS char_class,
		    SUM(count_char_class) AS count_char_class
		FROM (
		    SELECT 
		        CASE 
		            WHEN char_class IN (
		                SELECT char_class 
		                FROM (
		                    SELECT char_class, COUNT(char_class) AS count_char_class
		                    FROM character_sheet
		                    GROUP BY char_class
		                    ORDER BY count_char_class DESC
		                    LIMIT 6
		                ) AS top6
		            ) THEN char_class
		            ELSE '기타'
		        END AS char_class,
		        COUNT(char_class) AS count_char_class
		    FROM character_sheet
		    GROUP BY CASE 
		            WHEN char_class IN (
		                SELECT char_class 
		                FROM (
		                    SELECT char_class, COUNT(char_class) AS count_char_class
		                    FROM character_sheet
		                    GROUP BY char_class
		                    ORDER BY count_char_class DESC
		                    LIMIT 6
		                ) AS top6
		            ) THEN char_class
		            ELSE '기타'
		        END
		) AS grouped_data
		GROUP BY char_class
		ORDER BY count_char_class DESC
	</select>
	
	<!-- 종족 선호 -->
	<select id="preferredSpecies" resultType="HashMap">
		select c.species species, count(c.species) count_species
		from character_sheet c 
		group by c.species
		order by count(c.species) DESC
	</select>
	
	<!-- 종족에 따른 스탯 선호도 -->
	<select id="preferredStatsBySpecies" resultType="HashMap">
		select avg(str) avg_str, avg(dex) avg_dex, avg(con) avg_con, avg(intelligence) avg_intelligence, avg(wis) avg_wis, avg(chr) avg_chr
		from character_sheet
		where species = #{species}
	</select>

</mapper>
